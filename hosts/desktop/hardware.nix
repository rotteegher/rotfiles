# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  user,
  ...
}: {
  imports = [
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "ahci" "nvme" "usb_storage" "usbhid" "sd_mod" "usbcore" "i2c-dev"];
  boot.initrd.kernelModules = ["i2c-dev" "evdi"];
  boot.kernelModules = ["kvm-intel" "usbcore" "snd-seq" "snd-rawmidi" "binder_linux" "ashmem_linux" "i915" ];
  boot.blacklistedKernelModules = ["amdgpu"];
  boot.extraModulePackages = [ config.boot.kernelPackages.evdi ];

  boot.kernelParams = [
    "boot.shell_on_fail"
    "acpi_backlight=vendor"
    "video.use_native_backlight=1"
  ];
  boot.tmp.useTmpfs = true;

  boot.kernel.sysctl."kernel.unprivileged_userns_clone" = 1;


  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  #
  hardware.printers = {
    ensurePrinters = [
      {
        name = "EPSON-ET-2810";
        location = "Living Room";
        deviceUri = "http://192.168.1.200:631/ipp/print";
        model = "epson-inkjet-printer-escpr/Epson-ET-2810_Series-epson-escpr-en.ppd";
        ppdOptions = {
          PageSize = "A4";
        };
      }
      {
        name = "EPSON-ET-2810-local";
        location = "My Room";
        deviceUri = "http://192.168.12.117:631/ipp/print";
        model = "epson-inkjet-printer-escpr/Epson-ET-2810_Series-epson-escpr-en.ppd";
        ppdOptions = {
          PageSize = "A4";
        };
      }
    ];
    ensureDefaultPrinter = "EPSON-ET-2810-local";
  };


  hardware.openrazer.enable = true;
  environment.systemPackages = with pkgs; [
      polychromatic
      razergenie
      razer-cli
  ];
  users.users.${user}.extraGroups = ["i2c" "plugdev" "openrazer"];


  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "performance";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  hardware.enableRedistributableFirmware = true;
}
